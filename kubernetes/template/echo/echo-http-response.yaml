apiVersion: v1
kind: ConfigMap
metadata:
  name: echo-http-response-config
data:
  main.py: |
    """
    Very simple HTTP server in python for logging requests
    Usage::
        ./server.py [<port>]
    """
    from http.server import BaseHTTPRequestHandler, HTTPServer
    import logging

    class S(BaseHTTPRequestHandler):
        def _set_response(self):
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()

        def do_GET(self):
            logging.info("GET request,\nPath: %s\nHeaders:\n%s\n", str(self.path), str(self.headers))
            self._set_response()
            self.wfile.write("GET request for {}".format(self.path).encode('utf-8'))

        def do_POST(self):
            content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
            post_data = self.rfile.read(content_length) # <--- Gets the data itself
            logging.info("POST request,\nPath: %s\nHeaders:\n%s\n\nBody:\n%s\n",
                    str(self.path), str(self.headers), post_data.decode('utf-8'))

            self._set_response()
            self.wfile.write("POST request for {}".format(self.path).encode('utf-8'))

    def run(server_class=HTTPServer, handler_class=S, port=8080):
        logging.basicConfig(level=logging.INFO)
        server_address = ('', port)
        httpd = server_class(server_address, handler_class)
        logging.info('Starting httpd...\n')
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            pass
        httpd.server_close()
        logging.info('Stopping httpd...\n')

    if __name__ == '__main__':
        from sys import argv

        if len(argv) == 2:
            run(port=int(argv[1]))
        else:
            run()
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: echo-http-response
  labels:
    app: echo-http-response
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echo-http-response
  template:
    metadata:
      labels:
        app: echo-http-response
    spec:
      containers:
        - name: echo-http-response
          image: python:3.7-alpine3.17
          command:
            - "python3"
            - "/root/main.py"
            - "80"
          volumeMounts:
            - name: echo-http-response-config
              mountPath: /root/main.py
              subPath: main.py
              readOnly: true
      volumes:
        - name: echo-http-response-config
          configMap:
            name: echo-http-response-config
---
kind: Service
apiVersion: v1
metadata:
  name: echo-http-response
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
  selector:
    app: echo-http-response
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: echo-http-response
spec:
  rules:
  - host: $(DOMAIN)
    http:
      paths:
      - backend:
          service:
            name: echo-http-response
            port:
              number: 80
        pathType: Prefix
        path: /echo(/|$)(.*)